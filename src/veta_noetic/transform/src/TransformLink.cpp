/**
 * --------------------------------------------------
 *
 * @file    TransformLink.cpp
 * @brief   VETA ROS Noetic Transformation Source
 * @author  Minkyu Kil
 * @date    2025-01-01
 * @version 1.0
 *
 * Copyright (c) 2025, Minkyu Kil
 * All rights reserved
 *
 * --------------------------------------------------
 */

#include "veta_noetic/transform/TransformLink.h"
#include "veta/util/LogHandler.h"
#include "geometry_msgs/Pose.h"

/**
 * @brief veta::noetic::TransformLink
 * @details Make transformation link by broadcasting origin and frame ID
 */
veta::noetic::TransformLink::TransformLink(const std::string& parentFrame, const std::string &childFrame)
  : m_parentFrame(parentFrame)
  , m_childFrame(childFrame)
  , m_listener(m_buffer)
{
    m_stampedTF.header.frame_id = parentFrame;
    m_stampedTF.child_frame_id = childFrame;
}

/**
 * @brief Set origin of the frame
 * @details Requires 3D translation and rotation, rotation is euler representation
 */
void veta::noetic::TransformLink::setOrigin(const double &x, const double &y, const double &z
                                           ,const double &roll, const double &pitch, const double &yaw)
{
    // translation
    m_stampedTF.transform.translation.x = x;
    m_stampedTF.transform.translation.y = y;
    m_stampedTF.transform.translation.z = z;

    // rotation, quaternion representation required
    tf2::Quaternion quaternion;
    quaternion.setRPY(roll, pitch, yaw);

    m_stampedTF.transform.rotation.w = quaternion.w();
    m_stampedTF.transform.rotation.x = quaternion.x();
    m_stampedTF.transform.rotation.y = quaternion.y();
    m_stampedTF.transform.rotation.z = quaternion.z();
}

/**
 * @brief Set origin of the frame
 * @details Requires 3D translation and rotation, rotation is quaternion representation
 */
void veta::noetic::TransformLink::setOrigin(const double &x, const double &y, const double &z
                                              ,const double &qw, const double &qx, const double &qy, const double &qz)
{
    // translation
    m_stampedTF.transform.translation.x = x;
    m_stampedTF.transform.translation.y = y;
    m_stampedTF.transform.translation.z = z;

    // rotation, quaternion representation required
    m_stampedTF.transform.rotation.w = qw;
    m_stampedTF.transform.rotation.x = qx;
    m_stampedTF.transform.rotation.y = qy;
    m_stampedTF.transform.rotation.z = qz;
}



/**
 * @brief Transformation broadcaster and listener
 * @details Transform link is generated by broadcasting
 */
void veta::noetic::TransformLink::broadcast()
{
    m_stampedTF.header.stamp = ros::Time::now();
    m_broadcaster.sendTransform(m_stampedTF);
}

/**
 * @brief Transformation broadcaster and listener
 * @details Transform link is generated by broadcasting
 */
geometry_msgs::PoseStamped veta::noetic::TransformLink::listen(const bool &printTransform)
{
    geometry_msgs::TransformStamped stampedTF;
    try
    {
        // caption...
        stampedTF = m_buffer.lookupTransform(m_parentFrame, m_childFrame, ros::Time(0));
    }
    catch(const std::exception& ex)
    {
        VETA_WARN("%s", ex.what());
    }

    geometry_msgs::Pose pose;
    pose.position.x  = stampedTF.transform.translation.x;
    pose.position.y  = stampedTF.transform.translation.y;
    pose.position.z  = stampedTF.transform.translation.z;
    pose.orientation = stampedTF.transform.rotation;

    geometry_msgs::PoseStamped poseStamped;
    poseStamped.header.stamp = ros::Time::now();
    poseStamped.pose = pose;
    
    // Print transformation output
    if(printTransform)
    {
        VETA_INFO("[Translation]");
        VETA_INFO("    x: %lf", stampedTF.transform.translation.x);
        VETA_INFO("    y: %lf", stampedTF.transform.translation.y);
        VETA_INFO("    z: %lf", stampedTF.transform.translation.z);

        VETA_INFO("[Rotation]");
        VETA_INFO("    w: %lf", stampedTF.transform.rotation.w);
        VETA_INFO("    x: %lf", stampedTF.transform.rotation.x);
        VETA_INFO("    y: %lf", stampedTF.transform.rotation.y);
        VETA_INFO("    z: %lf", stampedTF.transform.rotation.z);
        VETA_INFO("---");
    }

    return poseStamped;
}