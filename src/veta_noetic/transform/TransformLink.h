/**
 * --------------------------------------------------
 *
 * @file    TransformLink.h
 * @brief   VETA ROS Noetic Transformation Class
 * @author  Minkyu Kil
 * @date    2025-01-01
 * @version 1.0
 *
 * Copyright (c) 2025, Minkyu Kil
 * All rights reserved
 *
 * --------------------------------------------------
 */

#ifndef VETA_NOETIC_TRANSFORM_TRANSFORMLINK_H_
#define VETA_NOETIC_TRANSFORM_TRANSFORMLINK_H_

#include "ros/ros.h"
#include "geometry_msgs/TransformStamped.h"
#include "geometry_msgs/PoseStamped.h"

#include "tf2/LinearMath/Quaternion.h"
#include "tf2_ros/transform_listener.h"
#include "tf2_ros/transform_broadcaster.h"

#include <string>

namespace veta
{
    namespace noetic
    {
        /**
         * @brief veta::noetic::TransformLink
         * @details Make transformation link by broadcasting origin and frame ID
         */
        class TransformLink
        {
            // "TransormLink" members
            private:

                // Frame ID
                std::string m_parentFrame, m_childFrame;

                // Transform communication
                tf2_ros::Buffer               m_buffer;
                tf2_ros::TransformBroadcaster m_broadcaster;
                tf2_ros::TransformListener    m_listener;

                // transformation data
                geometry_msgs::TransformStamped m_stampedTF;

            // "TransormLink" methods
            public:

                /**
                 * @brief Class constructor and destructor
                 * @details Class constructor parameter must be set
                 */
                TransformLink(const std::string& parentFrame, const std::string &childFrame);
                ~TransformLink() = default;

                /**
                 * @brief Set origin of the frame
                 * @details Requires 3D translation and rotation, rotation is euler representation
                 */
                void setOrigin(const double &x, const double &y, const double &z
                              ,const double &roll, const double &pitch, const double &yaw);

                /**
                 * @brief Set origin of the frame
                 * @details Requires 3D translation and rotation, rotation is quaternion representation
                 */
                void setOrigin(const double &x, const double &y, const double &z
                              ,const double &qw, const double &qx, const double &qy, const double &qz);

                /**
                 * @brief Transformation broadcaster and listener
                 * @details Transform link is generated by broadcasting
                 */
                void broadcast();
                geometry_msgs::PoseStamped listen(const bool &printTransform = false);

        }; // class TransformLink

        class StaticTransformLink
        {
            // "StaticTransormLink" members
            private:

            // "StaticTransormLink" methods
            public:

        }; // class StaticTransformLink
    }
}

#endif // VETA_NOETIC_TRANSFORM_TRANSFORMLINK_H_